#%% Bloque 1 Genera el filtro
# ===============================

# Importa librer√≠as
import numpy as np
import matplotlib.pyplot as plt

# Par√°metros
f_clk = 50e6        # Frecuencia de reloj en Hz (1 MHz para este ejemplo)
f_c = f_clk / 25    # Frecuencia de corte 
N = 14              # N√∫mero de coeficientes (taps)

# ===============================
# Generaci√≥n del filtro FIR
# ===============================
# Genera el vector de muestras (n)
n = np.arange(N)

# Calcula los coeficientes del filtro FIR usando la f√≥rmula de sinc
h = np.sinc(2 * f_c * (n - (N-1)/2) / f_clk)

# Genera la ventana de Hamming para reducir el rizado
w = 0.54 - 0.46 * np.cos(2 * np.pi * n / (N-1))

# Aplica la ventana al filtro sinc
h = h * w

# Normaliza los coeficientes para evitar distorsiones en la amplitud asegurando que la suma de los coeficientes sea 1
h = h / np.sum(h)

# ========================
# Escalado para hardware
# ========================
# Escalado por 2^15 (para 16 bits)
scale_factor = 2**15
# Redondeo y conversi√≥n a enteros
h_scaled = np.round(h * scale_factor).astype(int)

# ========================
# Muestra los resultados
# ========================
print("Coeficientes del filtro FIR (pasabajo):")
print(h)

print("\nCoeficientes escalados (multiplicados por 2^15):")
print(h_scaled)

# Mostrar los coeficientes en formato hexadecimal para Verilog
print("\nCoeficientes en formato hexadecimal para Verilog:")
for coeff in h_scaled:
    print(f"16'h{coeff:04X};")  # Formato hexadecimal de 4 d√≠gitos

# ========================
# Respuesta en frecuencia
# ========================
# Calcula la respuesta en frecuencia usando la FFT
H_freq = np.fft.fft(h, 4096)  # 1024 puntos para mayor resoluci√≥n
f = np.fft.fftfreq(4096, 1/f_clk)  # Frecuencias asociadas a los puntos FFT

# Magnitud y fase de la respuesta en frecuencia
H_mag = np.abs(H_freq)  # Magnitud
H_phase = np.angle(H_freq)  # Fase
H_mag_dB = 20 * np.log10(H_mag + 1e-20) 

# Grafica la magnitud de la respuesta en frecuencia en dB
plt.figure(figsize=(10, 6))

# Magnitud en dB
plt.subplot(2, 1, 1)
plt.plot(f[:2048], H_mag_dB[:2048])  # Solo se grafican las frecuencias positivas
plt.title("Respuesta en Frecuencia - Magnitud en dB")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Magnitud (dB)")
plt.grid(True)

# Fase de la respuesta en frecuencia
plt.subplot(2, 1, 2)
plt.plot(f[:512], np.degrees(H_phase[:512]))  # Convertir fase a grados
plt.title("Respuesta en Frecuencia - Fase")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Fase (grados)")
plt.grid(True)

# Gr√°ficas
plt.tight_layout()
plt.show()

# ========================
# Graficar los coeficientes
# ========================
plt.figure(figsize=(8, 5))
plt.stem(n, h_scaled, basefmt=" ")
plt.title("Coeficientes del Filtro FIR Pasabajo Escalados", fontsize=14)
plt.xlabel("n (√çndice de Coeficiente)", fontsize=12)
plt.ylabel("Valor de h[n] Escalado", fontsize=12)
plt.grid(True)
plt.xticks(n)  # Asegurar que los √≠ndices del coeficiente sean claramente visibles
plt.tight_layout()  # Ajustar el dise√±o para evitar recortes
plt.show()

# %% Bloque 2 Guardar en un archivo
file_name = f"..\\FIR.srcs\\coeff_1\\M{len(h_scaled)}_coefficients.dat"

# ======================================================================
# Escribe los coeficientes en el archivo
# ======================================================================

with open(file_name, "w") as file:
    for coeff in h_scaled:
        # Convertir a complemento a dos (para 16 bits)
        if coeff < 0:
            coeff = (1 << 16) + coeff  
        # Escribir en hexadecimal con salto de l√≠nea
        file.write(f"{coeff:04X}\n")  

# Mensaje de confirmaci√≥n mejorado
print(f"‚úÖ Coeficientes guardados en '{file_name}'")
print(f"üìÇ Ubicaci√≥n: {file_name}")
print(f"üî¢ Total de coeficientes: {len(h_scaled)}")


# %% Bloque 3 Verificaci√≥n del filtro

# ======================================================================
# Genera una se√±al temporal (suma de se√±ales de diferentes frecuencias)
# ======================================================================

# Vector de tiempo, 1 ms con frecuencia de muestreo f_clk
f_clk = 50e6        # Frecuencia de reloj
t = np.linspace(0, 0.01, int(0.01 * f_clk), endpoint=False)  

# Se√±al mixta con dos frecuencias
f1 = 2e5  
f2 = 8e6  
signal = 0.5 * np.sin(2 * np.pi * f1 * t) + 0.35 * np.sin(2 * np.pi * f2 * t)  

# Filtrar la se√±al usando el filtro FIR
filtered_signal = np.convolve(signal, h, mode='same')

# Graficar la se√±al original y la filtrada en el dominio del tiempo
plt.figure(figsize=(10, 6))

# Se√±al original
muestras = 1000;
plt.subplot(2, 2, 1)
plt.plot(t[:muestras], signal[:muestras])  # Se muestra una porci√≥n para mejor visualizaci√≥n
plt.title("Se√±al original en el dominio del tiempo")
plt.xlabel("Tiempo (s)")
plt.ylabel("Amplitud")
plt.grid(True)

# Se√±al filtrada
plt.subplot(2, 2, 2)
plt.plot(t[:muestras], filtered_signal[:muestras])
plt.title("Se√±al filtrada en el dominio del tiempo")
plt.xlabel("Tiempo (s)")
plt.ylabel("Amplitud")
plt.grid(True)

# Transformada de Fourier (FFT)
n_fft = 2**14  # Tama√±o de la FFT
f_signal = np.fft.fft(signal, n_fft)
f_filtered_signal = np.fft.fft(filtered_signal, n_fft)

# Normalizaci√≥n y espectro unilateral
f_signal_mag = np.abs(f_signal[:n_fft//2]) / (n_fft//2)
f_filtered_signal_mag = np.abs(f_filtered_signal[:n_fft//2]) / (n_fft//2)

# Eje de frecuencias
f_axis = np.fft.fftfreq(n_fft, 1/f_clk)[:n_fft//2]  # Solo parte positiva

# Gr√°fico en el dominio de la frecuencia
plt.subplot(2, 2, 3)
plt.plot(f_axis, 20 * np.log10(f_signal_mag), label="Se√±al original")
plt.title("Espectro de la se√±al original")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Magnitud (dB)")
plt.grid(True)
plt.ylim(-100, 0)

plt.subplot(2, 2, 4)
plt.plot(f_axis, 20 * np.log10(f_filtered_signal_mag), label="Se√±al filtrada")
plt.title("Espectro de la se√±al filtrada")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Magnitud (dB)")
plt.grid(True)
plt.ylim(-100, 0)

plt.tight_layout()
plt.show()

# %% Bloque 4 Guarda para usar como se√±al en el testbench

# ======================================================================
# Escribe los datos a un archivo
# ======================================================================

# Acoto la se√±al
signal_limited = signal[:muestras]

# Escalado por 2^15 (para 16 bits)
scale_factor = 2**15
# Redondeo y conversi√≥n a enteros
sig_scaled = np.round(signal_limited * scale_factor).astype(int)

sig_name = f"..\\FIR.srcs\\sim_1\\data\\input_signal.dat"

with open(sig_name, "w") as file:
    for data in sig_scaled:
        # Convertir a complemento a dos (para 16 bits)
        if data < 0:
            data = (1 << 16) + data  
        # Escribir en hexadecimal con salto de l√≠nea
        file.write(f"{data:04X}\n")  

# Mensaje de confirmaci√≥n mejorado
print(f"‚úÖ Se√±al de entrada guardada en '{sig_name}'")
print(f"üìÇ Ubicaci√≥n: {sig_name}")
print(f"üî¢ Total de muestras: {len(sig_scaled)}")


# %%
